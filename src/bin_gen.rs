use crate::permutation::Permutation;
use std::fs::File;
use std::io::{self, Write};
use std::path::Path;

/// Return a tuple containing the raw bytes of the constants, and the generated MDS matrix.
///
/// The generated values contains the current default values for Poseidon.
pub fn permutation_params_to_bytes() -> (Vec<u8>, Vec<u8>) {
    let params = Permutation::default();

    let bytes_constants: Vec<u8> = params.constants().iter().fold(vec![], |mut v, s| {
        v.extend_from_slice(s.as_bytes());
        v
    });

    let bytes_matrix: Vec<u8> = params.matrix().matrix().iter().fold(vec![], |mut v, row| {
        let row_bytes: Vec<u8> = row.iter().fold(vec![], |mut vr, s| {
            vr.extend_from_slice(s.as_bytes());
            vr
        });
        v.extend_from_slice(row_bytes.as_slice());
        v
    });

    (bytes_constants, bytes_matrix)
}

/// Write the raw bytes generated by [`permutation_params_to_bytes`] to the provided path
///
/// # Example
/// ```no_run,ignore
/// use hades252::bin_gen::*;
///
/// persist_params_bytes("/tmp/constants.bin", "/tmp/matrix.bin").unwrap();
/// ```
pub fn persist_params_bytes<P: AsRef<Path>>(
    constants_path: P,
    matrix_path: P,
) -> Result<(), io::Error> {
    let (constants, matrix) = permutation_params_to_bytes();

    File::create(constants_path).and_then(|mut f| f.write_all(constants.as_slice()))?;
    File::create(matrix_path).and_then(|mut f| f.write_all(matrix.as_slice()))?;

    Ok(())
}
